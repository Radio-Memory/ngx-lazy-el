{"version":3,"file":"radiomemory-ngx-lazy-el-v10.js","sources":["../../../../libs/ngx-lazy-el/src/lib/tokens.ts","../../../../libs/ngx-lazy-el/src/lib/component-loader.service.ts","../../../../libs/ngx-lazy-el/src/lib/lazy-load.directive.ts","../../../../libs/ngx-lazy-el/src/lib/ngx-lazy-el.module.ts","../../../../libs/ngx-lazy-el/src/radiomemory-ngx-lazy-el-v10.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { LoadChildrenCallback } from '@angular/router';\n\n/** Injection token to provide the element path modules. */\nexport const LAZY_CMPS_PATH_TOKEN = new InjectionToken('ngx-lazy-cmp-registry');\n\nexport interface LazyComponentDef {\n  selector: string;\n  // prop needs to be named like this\n  loadChildren: LoadChildrenCallback;\n}\n","import {\n  Injectable,\n  Injector,\n  Inject,\n  NgModuleRef,\n  Compiler\n} from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { LazyComponentDef, LAZY_CMPS_PATH_TOKEN } from './tokens';\nimport { Observable, of, from } from 'rxjs';\nimport { LazyCmpLoadedEvent } from './lazy-cmp-loaded-event';\nimport { LoadChildrenCallback } from '@angular/router';\n\ninterface LazyModule {\n  customElementComponent: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentLoaderService {\n  private componentsToLoad: Map<string, LazyComponentDef>;\n  private loadedCmps = new Map<string, NgModuleRef<any>>();\n  private elementsLoading = new Map<string, Promise<LazyCmpLoadedEvent>>();\n\n  constructor(\n    private injector: Injector,\n    private compiler: Compiler,\n    @Inject(LAZY_CMPS_PATH_TOKEN)\n    elementModulePaths: {\n      selector: string;\n      loadChildren: LoadChildrenCallback;\n    }[]\n  ) {\n    const ELEMENT_MODULE_PATHS = new Map<string, any>();\n    elementModulePaths.forEach(route => {\n      ELEMENT_MODULE_PATHS.set(route.selector, route);\n    });\n    this.componentsToLoad = ELEMENT_MODULE_PATHS;\n  }\n\n  getComponentsToLoad() {\n    return this.componentsToLoad.keys();\n  }\n\n  /**\n   * Heavily inspired by the Angular elements loader on the official repo\n   */\n  // loadContainedCustomElements(\n  //   element: HTMLElement\n  // ): Observable<LazyCmpLoadedEvent[]> {\n  //   const unregisteredSelectors = Array.from(\n  //     this.componentsToLoad.keys()\n  //   ).filter(s => element.querySelector(s));\n\n  //   // already registered elements\n  //   const alreadyRegistered = Array.from(this.loadedCmps.keys()).filter(s =>\n  //     element.querySelector(s)\n  //   );\n\n  //   // add the already registered in...elements won't be recreated\n  //   // the \"loadComponent(...)\"\n  //   unregisteredSelectors.push(...alreadyRegistered);\n\n  //   // Returns observable that completes when all discovered elements have been registered.\n  //   const allRegistered = Promise.all(\n  //     unregisteredSelectors.map(async s => {\n  //       // element.querySelector(s).remove();\n  //       const result = await this.loadComponent(s, true);\n  //       return result;\n  //     })\n  //   );\n  //   return from(allRegistered);\n  // }\n\n  loadContainedCustomElements(\n    tags: string[]\n  ): Observable<LazyCmpLoadedEvent[]> {\n    const unregisteredSelectors = Array.from(\n      this.componentsToLoad.keys()\n    ).filter(s => tags.find(x => x.toLowerCase() === s.toLowerCase()));\n\n    // already registered elements\n    const alreadyRegistered = Array.from(this.loadedCmps.keys()).filter(s =>\n      tags.find(x => x.toLowerCase() === s.toLowerCase())\n    );\n\n    // add the already registered in...elements won't be recreated\n    // the \"loadComponent(...)\"\n    unregisteredSelectors.push(...alreadyRegistered);\n\n    // Returns observable that completes when all discovered elements have been registered.\n    const allRegistered = Promise.all(\n      unregisteredSelectors.map(s => this.loadComponent(s, false))\n    );\n    return from(allRegistered);\n  }\n\n  /**\n   * Allows to lazy load a component given it's selector (i.e. tagname).\n   * If the component selector has been registered, it's according module\n   * will be fetched lazily\n   * @param componentTag selector of the component to load\n   * @param createInstance if true, creates an element and returns it in the promise\n   */\n  async loadComponent(\n    componentTag: string,\n    createInstance = true\n  ): Promise<LazyCmpLoadedEvent> {\n    if (this.elementsLoading.has(componentTag)) {\n      return this.elementsLoading.get(componentTag);\n    }\n\n    if (this.componentsToLoad.has(componentTag)) {\n      const cmpRegistryEntry = this.componentsToLoad.get(componentTag);\n      const path = cmpRegistryEntry.loadChildren;\n\n      const loadPromise = new Promise<LazyCmpLoadedEvent>(async (resolve, reject) => {\n        try {\n          const elementModule = await (path() as Promise<any>);\n          const moduleFactory = this.compiler.compileModuleSync(elementModule);\n          const moduleRef = moduleFactory.create(this.injector);\n          const lazyModuleInstance = moduleRef.instance as LazyModule;\n          let customElementComponent;\n\n          if (typeof lazyModuleInstance.customElementComponent === 'object') {\n            customElementComponent =\n              lazyModuleInstance.customElementComponent[componentTag];\n            if (!customElementComponent) {\n              throw `You specified multiple component elements in module ${elementModule} but there was no match for tag ${componentTag} in ${JSON.stringify(\n                lazyModuleInstance.customElementComponent\n              )}. Make sure the selector in the module is aligned with the one specified in the lazy module definition.`;\n            }\n          } else {\n            customElementComponent = lazyModuleInstance.customElementComponent;\n          }\n\n          const CustomElement = createCustomElement(customElementComponent, {\n            injector: this.injector\n          });\n\n          customElements!.define(componentTag, CustomElement);\n          await customElements.whenDefined(componentTag);\n\n          this.loadedCmps.set(componentTag, elementModule);\n          const componentInstance = createInstance\n            ? document.createElement(componentTag)\n            : null;\n\n          resolve({\n            selector: componentTag,\n            componentInstance\n          });\n\n          this.elementsLoading.delete(componentTag);\n          this.componentsToLoad.delete(componentTag);\n        } catch (err) {\n          this.elementsLoading.delete(componentTag);\n          reject(err);\n        }\n      });\n\n      this.elementsLoading.set(componentTag, loadPromise);\n      return loadPromise;\n    } else if (this.loadedCmps.has(componentTag)) {\n      return new Promise(resolve => {\n        resolve({\n          selector: componentTag,\n          componentInstance: createInstance\n            ? document.createElement(componentTag)\n            : null\n        });\n      });\n    } else {\n      throw new Error(\n        `Unrecognized component \"${componentTag}\". Make sure it is registered in the component registry`\n      );\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ChangeDetectorRef,\n  ViewContainerRef,\n  TemplateRef,\n  ContentChild,\n  ContentChildren,\n  AfterContentInit,\n  Input\n} from '@angular/core';\nimport { ComponentLoaderService } from './component-loader.service';\nimport { LazyCmpLoadedEvent } from './lazy-cmp-loaded-event';\n\n@Directive({\n  selector: '[ngxLazyEl]'\n})\nexport class LazyLoadDirective implements OnInit, OnDestroy {\n  // @Input() ngxLazyEl: string[] | string | null;\n  @Output() loaded = new EventEmitter<LazyCmpLoadedEvent>();\n\n  constructor(\n    private elementRef: ElementRef,\n    private componentLoader: ComponentLoaderService,\n    private cd: ChangeDetectorRef,\n    private vcr: ViewContainerRef,\n    private template: TemplateRef<any>\n  ) {}\n\n  ngOnInit() {\n    let nodeTags: string[]; // = this.ngxLazyEl;\n\n    if (!nodeTags) {\n      // try to automatically infer the elemements\n\n      const template = this.template.createEmbeddedView({});\n      if (template.rootNodes[0].children.length > 0) {\n        // we probably have a container with elements in it, so try to load all of them\n        // lazily\n        nodeTags = [...template.rootNodes[0].children].map(x =>\n          x.tagName.toLowerCase()\n        );\n      } else {\n        nodeTags = [template.rootNodes[0].tagName.toLowerCase()];\n      }\n    }\n\n    if (!nodeTags) {\n      throw new Error(\n        `Unable to automatically determine the dynamic element selectors. Alternatively you can pass them in via the *ngxLazyEl=\"['my-lazy-el']\"`\n      );\n    }\n\n    this.componentLoader\n      // .loadContainedCustomElements(this.elementRef.nativeElement)\n      .loadContainedCustomElements(nodeTags)\n      .subscribe(elements => {\n        this.vcr.clear();\n        this.vcr.createEmbeddedView(this.template);\n\n        // try to get the element DOM\n        let domInstance = null;\n        if (this.elementRef.nativeElement.parentElement) {\n          domInstance = this.elementRef.nativeElement.parentElement.querySelector(\n            elements[0].selector\n          );\n        }\n\n        this.notifyComponentLoaded({\n          selector: nodeTags[0],\n          componentInstance: domInstance\n        });\n      });\n  }\n\n  private isIvyMode(): boolean {\n    return (this.template as any)._declarationTContainer;\n  }\n\n  private notifyComponentLoaded(lazyCmpEv: LazyCmpLoadedEvent) {\n    this.loaded.emit({\n      selector: lazyCmpEv.selector,\n      componentInstance: lazyCmpEv.componentInstance\n    });\n  }\n\n  ngOnDestroy() {\n    console.log('lazy load destroyed');\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { LazyLoadDirective } from './lazy-load.directive';\nimport { LAZY_CMPS_PATH_TOKEN } from './tokens';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LazyLoadDirective],\n  exports: [LazyLoadDirective]\n})\nexport class NgxLazyElModule {\n  static forRoot(modulePaths: any[]): ModuleWithProviders<NgxLazyElModule> {\n    return {\n      ngModule: NgxLazyElModule,\n      providers: [\n        // { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n        {\n          provide: LAZY_CMPS_PATH_TOKEN,\n          useValue: modulePaths\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.ComponentLoaderService"],"mappings":"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"}